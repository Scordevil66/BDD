/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.app.bdd.form;

import com.app.bdd.controller.MovimientoController;
import com.app.bdd.controller.NomonetariasController;
import com.app.bdd.models.Movimientos;
import com.app.bdd.models.NoMonetarias;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ce
 */
public class FiltrosNoMonetarios extends javax.swing.JInternalFrame {

    /**
     * Creates new form FiltrosMonetarios
     */
    public FiltrosNoMonetarios() {
        initComponents();

        init();
        /*Maximise ventana*/
    }

    public void init() {
        try {
            NumTarj.setBackground(new java.awt.Color(238, 235, 235));
            Bin.setBackground(new java.awt.Color(238, 235, 235));
            FechFi.setBackground(new java.awt.Color(238, 235, 235));
            FechIni.setBackground(new java.awt.Color(238, 235, 235));
            Nit.setBackground(new java.awt.Color(238, 235, 235));
            SubTipo.setBackground(new java.awt.Color(238, 235, 235));
            
            
            List<Movimientos> entidades = new ArrayList<>();
            
            MovimientoController movimientoController = new MovimientoController();

            entidades = MovimientoController.consultaEntidades();

            jComboBox2.addItem("Seleccione");

            for (int i = 0; i < entidades.size(); i++) {
                jComboBox2.addItem(entidades.get(i).getCodBin() + " - " + entidades.get(i).getNombreBanco());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FiltrosNoMonetarios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(22, 10), new java.awt.Dimension(22, 10), new java.awt.Dimension(22, 10));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        NumTarj = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        FechIni = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        FechFi = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        Bin = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Nit = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        SubTipo = new javax.swing.JTextField();
        button12 = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        button1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(1024, 485));

        jLabel12.setText("SELECCIONE UN TIPO DE REPORTE");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE", "1 - EXTRACTO TARJETA", "2 - MOVIMIENTOS TARJETAS POR EMPRESA", "3 - MOVIMIENTOS TARJETAS POR ENTIDAD" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText(" Número de tarjeta");

        NumTarj.setEnabled(false);
        NumTarj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumTarjActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha Inicial");

        FechIni.setDateFormatString("yyyy-MM-dd");
        FechIni.setEnabled(false);

        jLabel3.setText("Fecha Final");

        FechFi.setDateFormatString("yyyy-MM-dd");
        FechFi.setEnabled(false);

        jLabel4.setText("NIT");

        Bin.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        Bin.setEnabled(false);

        jLabel5.setText("BIN");

        Nit.setEnabled(false);

        jLabel6.setText("Sub Tipo");

        SubTipo.setEnabled(false);

        button12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button12.setEnabled(false);
        button12.setLabel("Aplicar Filtro");
        button12.setVisible(false);
        button12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button12ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Información"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel7.setText("Entidad:");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        button1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/AplicarFiltro.png"))); // NOI18N
        button1.setBorderPainted(false);
        button1.setContentAreaFilled(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/LogoBodegadeDatos.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Bin, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(224, 224, 224))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(NumTarj, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(Nit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(FechIni, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(34, 34, 34)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(135, 135, 135)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SubTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FechFi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(button1)
                                .addGap(6, 6, 6)
                                .addComponent(button12, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(393, 393, 393))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox1))
                                .addGap(37, 37, 37))
                            .addComponent(button12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(button1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(FechIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(FechFi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NumTarj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Bin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Nit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SubTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(119, 119, 119))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String idTipoFiltroS = (String) jComboBox1.getSelectedItem();

        if ((idTipoFiltroS.equals("SELECCIONE"))) {
            button12.setEnabled(false);
            Bin.setEnabled(false);
            Nit.setEnabled(false);
            SubTipo.setEnabled(false);
            NumTarj.setEnabled(false);
            FechIni.setEnabled(false);
            FechFi.setEnabled(false);
            Bin.setBackground(new java.awt.Color(238, 235, 235));
            Nit.setBackground(new java.awt.Color(238, 235, 235));
            SubTipo.setBackground(new java.awt.Color(238, 235, 235));
            NumTarj.setBackground(new java.awt.Color(238, 235, 235));
            FechIni.setBackground(new java.awt.Color(238, 235, 235));
            FechFi.setBackground(new java.awt.Color(238, 235, 235));
        } else {
            String[] idTipoFiltroV = idTipoFiltroS.split(" - ");
            int idTipoFiltro = Integer.parseInt(idTipoFiltroV[0]);

            if (idTipoFiltro == 1) {
                button12.setEnabled(true);
                NumTarj.setBackground(new java.awt.Color(255, 255, 255));
                NumTarj.setEnabled(true);
                Bin.setBackground(new java.awt.Color(238, 235, 235));
                Bin.setEnabled(false);
                FechFi.setBackground(new java.awt.Color(255, 255, 255));
                FechFi.setEnabled(true);
                FechIni.setBackground(new java.awt.Color(255, 255, 255));
                FechIni.setEnabled(true);
                Nit.setBackground(new java.awt.Color(238, 235, 235));
                Nit.setEnabled(false);
                SubTipo.setBackground(new java.awt.Color(238, 235, 235));
                SubTipo.setEnabled(false);

            } else {
                if (idTipoFiltro == 2) {
                    button12.setEnabled(true);
                    NumTarj.setBackground(new java.awt.Color(238, 235, 235));
                    NumTarj.setEnabled(false);
                    Bin.setBackground(new java.awt.Color(255, 255, 255));
                    Bin.setEnabled(true);
                    FechFi.setBackground(new java.awt.Color(238, 235, 235));
                    FechFi.setEnabled(true);
                    FechIni.setBackground(new java.awt.Color(238, 235, 235));
                    FechIni.setEnabled(true);
                    Nit.setBackground(new java.awt.Color(255, 255, 255));
                    Nit.setEnabled(true);
                    SubTipo.setBackground(new java.awt.Color(255, 255, 255));
                    SubTipo.setEnabled(true);

                } else {
                    if (idTipoFiltro == 3) {
                        button12.setEnabled(true);
                        Bin.setBackground(new java.awt.Color(255, 255, 255));
                        Bin.setEnabled(true);
                        FechFi.setBackground(new java.awt.Color(255, 255, 255));
                        FechFi.setEnabled(true);
                        FechIni.setBackground(new java.awt.Color(255, 255, 255));
                        FechIni.setEnabled(true);
                        NumTarj.setBackground(new java.awt.Color(238, 235, 235));
                        NumTarj.setEnabled(false);
                        Nit.setBackground(new java.awt.Color(238, 235, 235));
                        Nit.setEnabled(false);
                        SubTipo.setBackground(new java.awt.Color(238, 235, 235));
                        SubTipo.setEnabled(false);

                    }

                }

            }
        }


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void NumTarjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumTarjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumTarjActionPerformed

    private void button12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button12ActionPerformed

        List<NoMonetarias> nomonetarias = new ArrayList<>();
        NomonetariasController nomovimientoController = new NomonetariasController();
        try {
            
            String idEntidadS = (String) jComboBox2.getSelectedItem();
            if(idEntidadS.trim().equals("Seleccione")){
                JOptionPane.showMessageDialog(rootPane,"Es necesario que seleccione una Entidad");
            }else{
            String[] idEntidadV = idEntidadS.split(" - ");
            String entidad = idEntidadV[0];
           

            if (FechIni.getDate() == null || FechFi.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane,"Los rangos de fecha no pueden estar vacios");
            } else {

                String idTipoFiltroS = (String) jComboBox1.getSelectedItem();
                String[] idTipoFiltroV = idTipoFiltroS.split(" - ");
                int idTipoFiltro = Integer.parseInt(idTipoFiltroV[0]);

                if (idTipoFiltro == 1) {

                    String formato = FechIni.getDateFormatString();
                    Date date = FechIni.getDate();

                    SimpleDateFormat sdf = new SimpleDateFormat(formato);
                    String fechIni = String.valueOf(sdf.format(date));

                    String formato2 = FechFi.getDateFormatString();
                    Date date2 = FechFi.getDate();

                    SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                    String fechFi = String.valueOf(sdf.format(date2));

                    nomonetarias = nomovimientoController.consultaPorTarjeta(NumTarj.getText().trim(), fechIni, fechFi, entidad);

                    DefaultTableModel modelo;
                    modelo = new DefaultTableModel();

                    jTable1.setModel(modelo);

                    modelo.addColumn("Fecha Novedad");
                    modelo.addColumn("Tipo Novedad");
                    modelo.addColumn(" Codigo Bin");
                    modelo.addColumn(" Nombre TarjetaHabiente");
                    modelo.addColumn("SupTipo");
                    modelo.addColumn("Codigo Oficina");
                    modelo.addColumn("Tipo Documento");
                    modelo.addColumn("Numero Documento");
                    modelo.addColumn("Nit Empresa");
                    modelo.addColumn("Nombre Empresa");
                    modelo.addColumn("Numero Tarjeta Anterior");
                    modelo.addColumn("Valor Comision");
                    modelo.addColumn("Estado Tarjeta");

                    for (int i = 0; i < nomonetarias.size(); i++) {
                        Object[] object = new Object[13];
                        object[0] = nomonetarias.get(i).getDateFechaNovedad();
                        object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                        object[2] = nomonetarias.get(i).getVarCodBin();
                        object[3] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                        object[4] = nomonetarias.get(i).getVarDescriSubtipo();
                        object[5] = nomonetarias.get(i).getVarOficina();
                        object[6] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                        object[7] = nomonetarias.get(i).getVarNumDocumento();
                        object[8] = nomonetarias.get(i).getVarNitEmpresa();
                        object[9] = nomonetarias.get(i).getVarNombreEmpresa();
                        object[10] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                        object[11] = nomonetarias.get(i).getDecValCarCobr();
                        object[12] = nomonetarias.get(i).getVarDescripEsta();

                        modelo.addRow(object);
                    }

                } else {
                    if (idTipoFiltro == 2) {

                        String formato = FechIni.getDateFormatString();
                        Date date = FechIni.getDate();

                        SimpleDateFormat sdf = new SimpleDateFormat(formato);
                        String fechIni = String.valueOf(sdf.format(date));

                        String formato2 = FechFi.getDateFormatString();
                        Date date2 = FechFi.getDate();

                        SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                        String fechFi = String.valueOf(sdf.format(date2));

                        nomonetarias = nomovimientoController.consultaPorEmpresa(Bin.getText().trim(), fechIni, fechFi, Nit.getText().trim(), SubTipo.getText().trim(), entidad);

                        DefaultTableModel modelo;
                        modelo = new DefaultTableModel();

                        jTable1.setModel(modelo);

                        modelo.addColumn("Fecha Novedad");
                        modelo.addColumn("Tipo Novedad");
                        modelo.addColumn(" Codigo Bin");
                        modelo.addColumn(" Numero Tarjeta");
                        modelo.addColumn(" Nombre TarjetaHabiente");
                        modelo.addColumn("SupTipo");
                        modelo.addColumn("Codigo Oficina");
                        modelo.addColumn("Tipo Documento");
                        modelo.addColumn("Numero Documento");
                        modelo.addColumn("Nit Empresa");
                        modelo.addColumn("Nombre Empresa");
                        modelo.addColumn("Numero Tarjeta Anterior");
                        modelo.addColumn("Valor Comision");
                        modelo.addColumn("Estado Tarjeta");

                        for (int i = 0; i < nomonetarias.size(); i++) {
                            Object[] object = new Object[14];
                            object[0] = nomonetarias.get(i).getDateFechaNovedad();
                            object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                            object[2] = nomonetarias.get(i).getVarCodBin();
                            object[3] = nomonetarias.get(i).getVarNumTarjeta();
                            object[4] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                            object[5] = nomonetarias.get(i).getVarDescriSubtipo();
                            object[6] = nomonetarias.get(i).getVarOficina();
                            object[7] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                            object[8] = nomonetarias.get(i).getVarNumDocumento();
                            object[9] = nomonetarias.get(i).getVarNitEmpresa();
                            object[10] = nomonetarias.get(i).getVarNombreEmpresa();
                            object[11] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                            object[12] = nomonetarias.get(i).getDecValCarCobr();
                            object[13] = nomonetarias.get(i).getVarDescripEsta();

                            modelo.addRow(object);
                        }

                    } else {
                        if (idTipoFiltro == 3) {

                            String formato = FechIni.getDateFormatString();
                            Date date = FechIni.getDate();

                            SimpleDateFormat sdf = new SimpleDateFormat(formato);
                            String fechIni = String.valueOf(sdf.format(date));

                            String formato2 = FechFi.getDateFormatString();
                            Date date2 = FechFi.getDate();

                            SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                            String fechFi = String.valueOf(sdf.format(date2));

                            nomonetarias = nomovimientoController.consultaPorEntidad(Bin.getText().trim(), fechIni, fechFi, entidad);

                            DefaultTableModel modelo;
                            modelo = new DefaultTableModel();

                            jTable1.setModel(modelo);

                            modelo.addColumn("Fecha Novedad");
                            modelo.addColumn("Tipo Novedad");
                            modelo.addColumn(" Codigo Bin");
                            modelo.addColumn(" Numero Tarjeta");
                            modelo.addColumn(" Nombre TarjetaHabiente");
                            modelo.addColumn("SupTipo");
                            modelo.addColumn("Codigo Oficina");
                            modelo.addColumn("Tipo Documento");
                            modelo.addColumn("Numero Documento");
                            modelo.addColumn("Nit Empresa");
                            modelo.addColumn("Nombre Empresa");
                            modelo.addColumn("Numero Tarjeta Anterior");
                            modelo.addColumn("Valor Comision");
                            modelo.addColumn("Estado Tarjeta");

                            for (int i = 0; i < nomonetarias.size(); i++) {
                                Object[] object = new Object[14];
                                object[0] = nomonetarias.get(i).getDateFechaNovedad();
                                object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                                object[2] = nomonetarias.get(i).getVarCodBin();
                                object[3] = nomonetarias.get(i).getVarNumTarjeta();
                                object[4] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                                object[5] = nomonetarias.get(i).getVarDescriSubtipo();
                                object[6] = nomonetarias.get(i).getVarOficina();
                                object[7] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                                object[8] = nomonetarias.get(i).getVarNumDocumento();
                                object[9] = nomonetarias.get(i).getVarNitEmpresa();
                                object[10] = nomonetarias.get(i).getVarNombreEmpresa();
                                object[11] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                                object[12] = nomonetarias.get(i).getDecValCarCobr();
                                object[13] = nomonetarias.get(i).getVarDescripEsta();

                                modelo.addRow(object);
                            }
                        }
                    }

                }
            }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FiltrosNoMonetarios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_button12ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
          List<NoMonetarias> nomonetarias = new ArrayList<>();
        NomonetariasController nomovimientoController = new NomonetariasController();
        try {
            
            String idEntidadS = (String) jComboBox2.getSelectedItem();
            if(idEntidadS.trim().equals("Seleccione")){
                JOptionPane.showMessageDialog(rootPane,"Es necesario que seleccione una Entidad");
            }else{
            String[] idEntidadV = idEntidadS.split(" - ");
            String entidad = idEntidadV[0];
           

            if (FechIni.getDate() == null || FechFi.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane,"Los rangos de fecha no pueden estar vacios");
            } else {

                String idTipoFiltroS = (String) jComboBox1.getSelectedItem();
                String[] idTipoFiltroV = idTipoFiltroS.split(" - ");
                int idTipoFiltro = Integer.parseInt(idTipoFiltroV[0]);

                if (idTipoFiltro == 1) {

                    String formato = FechIni.getDateFormatString();
                    Date date = FechIni.getDate();

                    SimpleDateFormat sdf = new SimpleDateFormat(formato);
                    String fechIni = String.valueOf(sdf.format(date));

                    String formato2 = FechFi.getDateFormatString();
                    Date date2 = FechFi.getDate();

                    SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                    String fechFi = String.valueOf(sdf.format(date2));

                    nomonetarias = nomovimientoController.consultaPorTarjeta(NumTarj.getText().trim(), fechIni, fechFi, entidad);

                    DefaultTableModel modelo;
                    modelo = new DefaultTableModel();

                    jTable1.setModel(modelo);

                    modelo.addColumn("Fecha Novedad");
                    modelo.addColumn("Tipo Novedad");
                    modelo.addColumn(" Codigo Bin");
                    modelo.addColumn(" Nombre TarjetaHabiente");
                    modelo.addColumn("SupTipo");
                    modelo.addColumn("Codigo Oficina");
                    modelo.addColumn("Tipo Documento");
                    modelo.addColumn("Numero Documento");
                    modelo.addColumn("Nit Empresa");
                    modelo.addColumn("Nombre Empresa");
                    modelo.addColumn("Numero Tarjeta Anterior");
                    modelo.addColumn("Valor Comision");
                    modelo.addColumn("Estado Tarjeta");

                    for (int i = 0; i < nomonetarias.size(); i++) {
                        Object[] object = new Object[13];
                        object[0] = nomonetarias.get(i).getDateFechaNovedad();
                        object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                        object[2] = nomonetarias.get(i).getVarCodBin();
                        object[3] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                        object[4] = nomonetarias.get(i).getVarDescriSubtipo();
                        object[5] = nomonetarias.get(i).getVarOficina();
                        object[6] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                        object[7] = nomonetarias.get(i).getVarNumDocumento();
                        object[8] = nomonetarias.get(i).getVarNitEmpresa();
                        object[9] = nomonetarias.get(i).getVarNombreEmpresa();
                        object[10] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                        object[11] = nomonetarias.get(i).getDecValCarCobr();
                        object[12] = nomonetarias.get(i).getVarDescripEsta();

                        modelo.addRow(object);
                    }

                } else {
                    if (idTipoFiltro == 2) {

                        String formato = FechIni.getDateFormatString();
                        Date date = FechIni.getDate();

                        SimpleDateFormat sdf = new SimpleDateFormat(formato);
                        String fechIni = String.valueOf(sdf.format(date));

                        String formato2 = FechFi.getDateFormatString();
                        Date date2 = FechFi.getDate();

                        SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                        String fechFi = String.valueOf(sdf.format(date2));

                        nomonetarias = nomovimientoController.consultaPorEmpresa(Bin.getText().trim(), fechIni, fechFi, Nit.getText().trim(), SubTipo.getText().trim(), entidad);

                        DefaultTableModel modelo;
                        modelo = new DefaultTableModel();

                        jTable1.setModel(modelo);

                        modelo.addColumn("Fecha Novedad");
                        modelo.addColumn("Tipo Novedad");
                        modelo.addColumn(" Codigo Bin");
                        modelo.addColumn(" Numero Tarjeta");
                        modelo.addColumn(" Nombre TarjetaHabiente");
                        modelo.addColumn("SupTipo");
                        modelo.addColumn("Codigo Oficina");
                        modelo.addColumn("Tipo Documento");
                        modelo.addColumn("Numero Documento");
                        modelo.addColumn("Nit Empresa");
                        modelo.addColumn("Nombre Empresa");
                        modelo.addColumn("Numero Tarjeta Anterior");
                        modelo.addColumn("Valor Comision");
                        modelo.addColumn("Estado Tarjeta");

                        for (int i = 0; i < nomonetarias.size(); i++) {
                            Object[] object = new Object[14];
                            object[0] = nomonetarias.get(i).getDateFechaNovedad();
                            object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                            object[2] = nomonetarias.get(i).getVarCodBin();
                            object[3] = nomonetarias.get(i).getVarNumTarjeta();
                            object[4] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                            object[5] = nomonetarias.get(i).getVarDescriSubtipo();
                            object[6] = nomonetarias.get(i).getVarOficina();
                            object[7] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                            object[8] = nomonetarias.get(i).getVarNumDocumento();
                            object[9] = nomonetarias.get(i).getVarNitEmpresa();
                            object[10] = nomonetarias.get(i).getVarNombreEmpresa();
                            object[11] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                            object[12] = nomonetarias.get(i).getDecValCarCobr();
                            object[13] = nomonetarias.get(i).getVarDescripEsta();

                            modelo.addRow(object);
                        }

                    } else {
                        if (idTipoFiltro == 3) {

                            String formato = FechIni.getDateFormatString();
                            Date date = FechIni.getDate();

                            SimpleDateFormat sdf = new SimpleDateFormat(formato);
                            String fechIni = String.valueOf(sdf.format(date));

                            String formato2 = FechFi.getDateFormatString();
                            Date date2 = FechFi.getDate();

                            SimpleDateFormat sdf2 = new SimpleDateFormat(formato2);
                            String fechFi = String.valueOf(sdf.format(date2));

                            nomonetarias = nomovimientoController.consultaPorEntidad(Bin.getText().trim(), fechIni, fechFi, entidad);

                            DefaultTableModel modelo;
                            modelo = new DefaultTableModel();

                            jTable1.setModel(modelo);

                            modelo.addColumn("Fecha Novedad");
                            modelo.addColumn("Tipo Novedad");
                            modelo.addColumn(" Codigo Bin");
                            modelo.addColumn(" Numero Tarjeta");
                            modelo.addColumn(" Nombre TarjetaHabiente");
                            modelo.addColumn("SupTipo");
                            modelo.addColumn("Codigo Oficina");
                            modelo.addColumn("Tipo Documento");
                            modelo.addColumn("Numero Documento");
                            modelo.addColumn("Nit Empresa");
                            modelo.addColumn("Nombre Empresa");
                            modelo.addColumn("Numero Tarjeta Anterior");
                            modelo.addColumn("Valor Comision");
                            modelo.addColumn("Estado Tarjeta");

                            for (int i = 0; i < nomonetarias.size(); i++) {
                                Object[] object = new Object[14];
                                object[0] = nomonetarias.get(i).getDateFechaNovedad();
                                object[1] = nomonetarias.get(i).getVarDescripcionTipoNovedad();
                                object[2] = nomonetarias.get(i).getVarCodBin();
                                object[3] = nomonetarias.get(i).getVarNumTarjeta();
                                object[4] = nomonetarias.get(i).getVarNombreTarjetahabiente();
                                object[5] = nomonetarias.get(i).getVarDescriSubtipo();
                                object[6] = nomonetarias.get(i).getVarOficina();
                                object[7] = nomonetarias.get(i).getVarDescripcionTipoDocumento();
                                object[8] = nomonetarias.get(i).getVarNumDocumento();
                                object[9] = nomonetarias.get(i).getVarNitEmpresa();
                                object[10] = nomonetarias.get(i).getVarNombreEmpresa();
                                object[11] = nomonetarias.get(i).getVarNumTarjetaAnterior();
                                object[12] = nomonetarias.get(i).getDecValCarCobr();
                                object[13] = nomonetarias.get(i).getVarDescripEsta();

                                modelo.addRow(object);
                            }
                        }
                    }

                }
            }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FiltrosNoMonetarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }//GEN-LAST:event_button1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Bin;
    private com.toedter.calendar.JDateChooser FechFi;
    private com.toedter.calendar.JDateChooser FechIni;
    private javax.swing.JTextField Nit;
    private javax.swing.JTextField NumTarj;
    private javax.swing.JTextField SubTipo;
    private javax.swing.JButton button1;
    private java.awt.Button button12;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
